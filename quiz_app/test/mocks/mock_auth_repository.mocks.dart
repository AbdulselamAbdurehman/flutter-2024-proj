// Mocks generated by Mockito 5.4.4 from annotations
// in quiz_app/test/mocks/mock_auth_repository.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:quiz_app/core/errors/failures.dart' as _i5;
import 'package:quiz_app/core/utils/utility_objects.dart' as _i6;
import 'package:quiz_app/features/auth/domain/repositories/auth_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i3.AuthRepository {
  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> login({
    required String? userId,
    required String? password,
    required String? role,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #userId: userId,
            #password: password,
            #role: role,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
            _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #userId: userId,
              #password: password,
              #role: role,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #login,
            [],
            {
              #userId: userId,
              #password: password,
              #role: role,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> signup({
    required String? username,
    required String? password,
    required String? email,
    required String? role,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [],
          {
            #username: username,
            #password: password,
            #email: email,
            #role: role,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
            _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #signup,
            [],
            {
              #username: username,
              #password: password,
              #email: email,
              #role: role,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #signup,
            [],
            {
              #username: username,
              #password: password,
              #email: email,
              #role: role,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);

  @override
  _i4.Future<void> logout() => (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> updateUsername(
          {required String? newUsername}) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateUsername,
          [],
          {#newUsername: newUsername},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
            _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #updateUsername,
            [],
            {#newUsername: newUsername},
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #updateUsername,
            [],
            {#newUsername: newUsername},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> updatePassword({
    required String? oldPassword,
    required String? newPassword,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #updatePassword,
          [],
          {
            #oldPassword: oldPassword,
            #newPassword: newPassword,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
            _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #updatePassword,
            [],
            {
              #oldPassword: oldPassword,
              #newPassword: newPassword,
            },
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #updatePassword,
            [],
            {
              #oldPassword: oldPassword,
              #newPassword: newPassword,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Success>> deleteUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteUser,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
            _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>.value(
                _FakeEither_0<_i5.Failure, _i6.Success>(
          this,
          Invocation.method(
            #deleteUser,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Success>>);
}
